/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Warehouse } from "./Warehouse";
import { WarehouseCountArgs } from "./WarehouseCountArgs";
import { WarehouseFindManyArgs } from "./WarehouseFindManyArgs";
import { WarehouseFindUniqueArgs } from "./WarehouseFindUniqueArgs";
import { CreateWarehouseArgs } from "./CreateWarehouseArgs";
import { UpdateWarehouseArgs } from "./UpdateWarehouseArgs";
import { DeleteWarehouseArgs } from "./DeleteWarehouseArgs";
import { WarehouseService } from "../warehouse.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Warehouse)
export class WarehouseResolverBase {
  constructor(
    protected readonly service: WarehouseService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "read",
    possession: "any",
  })
  async _warehousesMeta(
    @graphql.Args() args: WarehouseCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Warehouse])
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "read",
    possession: "any",
  })
  async warehouses(
    @graphql.Args() args: WarehouseFindManyArgs
  ): Promise<Warehouse[]> {
    return this.service.warehouses(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Warehouse, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "read",
    possession: "own",
  })
  async warehouse(
    @graphql.Args() args: WarehouseFindUniqueArgs
  ): Promise<Warehouse | null> {
    const result = await this.service.warehouse(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Warehouse)
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "create",
    possession: "any",
  })
  async createWarehouse(
    @graphql.Args() args: CreateWarehouseArgs
  ): Promise<Warehouse> {
    return await this.service.createWarehouse({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Warehouse)
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async updateWarehouse(
    @graphql.Args() args: UpdateWarehouseArgs
  ): Promise<Warehouse | null> {
    try {
      return await this.service.updateWarehouse({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Warehouse)
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "delete",
    possession: "any",
  })
  async deleteWarehouse(
    @graphql.Args() args: DeleteWarehouseArgs
  ): Promise<Warehouse | null> {
    try {
      return await this.service.deleteWarehouse(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
