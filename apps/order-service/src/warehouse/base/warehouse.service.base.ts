/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Warehouse as PrismaWarehouse } from "@prisma/client";

export class WarehouseServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.WarehouseCountArgs, "select">
  ): Promise<number> {
    return this.prisma.warehouse.count(args);
  }

  async warehouses<T extends Prisma.WarehouseFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.WarehouseFindManyArgs>
  ): Promise<PrismaWarehouse[]> {
    return this.prisma.warehouse.findMany<Prisma.WarehouseFindManyArgs>(args);
  }
  async warehouse<T extends Prisma.WarehouseFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.WarehouseFindUniqueArgs>
  ): Promise<PrismaWarehouse | null> {
    return this.prisma.warehouse.findUnique(args);
  }
  async createWarehouse<T extends Prisma.WarehouseCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WarehouseCreateArgs>
  ): Promise<PrismaWarehouse> {
    return this.prisma.warehouse.create<T>(args);
  }
  async updateWarehouse<T extends Prisma.WarehouseUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WarehouseUpdateArgs>
  ): Promise<PrismaWarehouse> {
    return this.prisma.warehouse.update<T>(args);
  }
  async deleteWarehouse<T extends Prisma.WarehouseDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.WarehouseDeleteArgs>
  ): Promise<PrismaWarehouse> {
    return this.prisma.warehouse.delete(args);
  }
}
